version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: showroom_postgres
    environment:
      POSTGRES_DB: showroom_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./configs/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - showroom_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Go Application
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: showroom_app
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=showroom_db
      - DB_SSL_MODE=disable
      - DB_TIMEZONE=Asia/Jakarta
      - SERVER_PORT=8080
      - SERVER_HOST=0.0.0.0
      - APP_ENV=production
      - JWT_SECRET_KEY=your-super-secret-jwt-key-for-production
      - JWT_EXPIRATION_HOUR=24
      - APP_NAME=Showroom Management System
      - APP_VERSION=1.0.0
      - LOG_LEVEL=info
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - showroom_network
    volumes:
      - ./storage:/app/storage
    restart: unless-stopped

  # Redis (for future caching needs)
  redis:
    image: redis:7-alpine
    container_name: showroom_redis
    ports:
      - "6379:6379"
    networks:
      - showroom_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:

networks:
  showroom_network:
    driver: bridge